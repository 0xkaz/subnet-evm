// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package sharedmemory

import (
	"errors"
	"fmt"
	"math/big"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/precompile/contract"
	"github.com/ava-labs/subnet-evm/vmerrs"

	_ "embed"

	"github.com/ethereum/go-ethereum/common"
)

const (
	// Gas costs for each function. These are set to 0 by default.
	// You should set a gas cost for each function in your contract.
	// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.
	// There are some predefined gas costs in contract/utils.go that you can use.
	ExportAVAXGasCost            uint64 = 0 // SET A GAS COST HERE
	ExportUTXOGasCost            uint64 = 0 // SET A GAS COST HERE
	GetNativeTokenAssetIDGasCost uint64 = 0 // SET A GAS COST HERE
	ImportAVAXGasCost            uint64 = 0 // SET A GAS COST HERE
	ImportUTXOGasCost            uint64 = 0 // SET A GAS COST HERE
)

// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = errors.New
	_ = big.NewInt
)

// Singleton StatefulPrecompiledContract and signatures.
var (

	// SharedMemoryRawABI contains the raw ABI of SharedMemory contract.
	//go:embed contract.abi
	SharedMemoryRawABI string

	SharedMemoryABI = contract.ParseABI(SharedMemoryRawABI)

	SharedMemoryPrecompile = createSharedMemoryPrecompile()
)

type ExportAVAXInput struct {
	DestinationChainID [32]byte
	Locktime           uint64
	Threshold          uint64
	Addrs              []common.Address
}

type ExportUTXOInput struct {
	Amount             uint64
	DestinationChainID [32]byte
	Locktime           uint64
	Threshold          uint64
	Addrs              []common.Address
}

type ImportAVAXInput struct {
	SourceChain [32]byte
	UtxoID      [32]byte
}

type ImportUTXOInput struct {
	SourceChain [32]byte
	UtxoID      [32]byte
}

type ImportUTXOOutput struct {
	Amount    uint64
	Locktime  uint64
	Threshold uint64
	Addrs     []common.Address
}

// UnpackExportAVAXInput attempts to unpack [input] as ExportAVAXInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackExportAVAXInput(input []byte) (ExportAVAXInput, error) {
	inputStruct := ExportAVAXInput{}
	err := SharedMemoryABI.UnpackInputIntoInterface(&inputStruct, "exportAVAX", input)

	return inputStruct, err
}

// PackExportAVAX packs [inputStruct] of type ExportAVAXInput into the appropriate arguments for exportAVAX.
func PackExportAVAX(inputStruct ExportAVAXInput) ([]byte, error) {
	return SharedMemoryABI.Pack("exportAVAX", inputStruct.DestinationChainID, inputStruct.Locktime, inputStruct.Threshold, inputStruct.Addrs)
}

func exportAVAX(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, ExportAVAXGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the ExportAVAXInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackExportAVAXInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	_ = inputStruct // CUSTOM CODE OPERATES ON INPUT
	// this function does not return an output, leave this one as is
	packedOutput := []byte{}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackExportUTXOInput attempts to unpack [input] as ExportUTXOInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackExportUTXOInput(input []byte) (ExportUTXOInput, error) {
	inputStruct := ExportUTXOInput{}
	err := SharedMemoryABI.UnpackInputIntoInterface(&inputStruct, "exportUTXO", input)

	return inputStruct, err
}

// PackExportUTXO packs [inputStruct] of type ExportUTXOInput into the appropriate arguments for exportUTXO.
func PackExportUTXO(inputStruct ExportUTXOInput) ([]byte, error) {
	return SharedMemoryABI.Pack("exportUTXO", inputStruct.Amount, inputStruct.DestinationChainID, inputStruct.Locktime, inputStruct.Threshold, inputStruct.Addrs)
}

func exportUTXO(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, ExportUTXOGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the ExportUTXOInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackExportUTXOInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	_ = inputStruct // CUSTOM CODE OPERATES ON INPUT
	// this function does not return an output, leave this one as is
	packedOutput := []byte{}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackGetNativeTokenAssetIDInput attempts to unpack [input] into the common.Address type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackGetNativeTokenAssetIDInput(input []byte) (common.Address, error) {
	res, err := SharedMemoryABI.UnpackInput("getNativeTokenAssetID", input)
	if err != nil {
		return common.Address{}, err
	}
	unpacked := *abi.ConvertType(res[0], new(common.Address)).(*common.Address)
	return unpacked, nil
}

// PackGetNativeTokenAssetID packs [caller] of type common.Address into the appropriate arguments for getNativeTokenAssetID.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackGetNativeTokenAssetID(caller common.Address) ([]byte, error) {
	return SharedMemoryABI.Pack("getNativeTokenAssetID", caller)
}

// PackGetNativeTokenAssetIDOutput attempts to pack given assetID of type [32]byte
// to conform the ABI outputs.
func PackGetNativeTokenAssetIDOutput(assetID [32]byte) ([]byte, error) {
	return SharedMemoryABI.PackOutput("getNativeTokenAssetID", assetID)
}

func getNativeTokenAssetID(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, GetNativeTokenAssetIDGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the GetNativeTokenAssetIDInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackGetNativeTokenAssetIDInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	_ = inputStruct // CUSTOM CODE OPERATES ON INPUT

	var output [32]byte // CUSTOM CODE FOR AN OUTPUT
	packedOutput, err := PackGetNativeTokenAssetIDOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackImportAVAXInput attempts to unpack [input] as ImportAVAXInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackImportAVAXInput(input []byte) (ImportAVAXInput, error) {
	inputStruct := ImportAVAXInput{}
	err := SharedMemoryABI.UnpackInputIntoInterface(&inputStruct, "importAVAX", input)

	return inputStruct, err
}

// PackImportAVAX packs [inputStruct] of type ImportAVAXInput into the appropriate arguments for importAVAX.
func PackImportAVAX(inputStruct ImportAVAXInput) ([]byte, error) {
	return SharedMemoryABI.Pack("importAVAX", inputStruct.SourceChain, inputStruct.UtxoID)
}

func importAVAX(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, ImportAVAXGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the ImportAVAXInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackImportAVAXInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	_ = inputStruct // CUSTOM CODE OPERATES ON INPUT
	// this function does not return an output, leave this one as is
	packedOutput := []byte{}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackImportUTXOInput attempts to unpack [input] as ImportUTXOInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackImportUTXOInput(input []byte) (ImportUTXOInput, error) {
	inputStruct := ImportUTXOInput{}
	err := SharedMemoryABI.UnpackInputIntoInterface(&inputStruct, "importUTXO", input)

	return inputStruct, err
}

// PackImportUTXO packs [inputStruct] of type ImportUTXOInput into the appropriate arguments for importUTXO.
func PackImportUTXO(inputStruct ImportUTXOInput) ([]byte, error) {
	return SharedMemoryABI.Pack("importUTXO", inputStruct.SourceChain, inputStruct.UtxoID)
}

// PackImportUTXOOutput attempts to pack given [outputStruct] of type ImportUTXOOutput
// to conform the ABI outputs.
func PackImportUTXOOutput(outputStruct ImportUTXOOutput) ([]byte, error) {
	return SharedMemoryABI.PackOutput("importUTXO",
		outputStruct.Amount,
		outputStruct.Locktime,
		outputStruct.Threshold,
		outputStruct.Addrs,
	)
}

func importUTXO(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, ImportUTXOGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the ImportUTXOInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackImportUTXOInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	_ = inputStruct             // CUSTOM CODE OPERATES ON INPUT
	var output ImportUTXOOutput // CUSTOM CODE FOR AN OUTPUT
	packedOutput, err := PackImportUTXOOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// createSharedMemoryPrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.
func createSharedMemoryPrecompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"exportAVAX":            exportAVAX,
		"exportUTXO":            exportUTXO,
		"getNativeTokenAssetID": getNativeTokenAssetID,
		"importAVAX":            importAVAX,
		"importUTXO":            importUTXO,
	}

	for name, function := range abiFunctionMap {
		method, ok := SharedMemoryABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}
