// Code generated
// This file is a generated precompile contract with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

// There are some must-be-done changes waiting in the file. Each area requiring you to add your code is marked with CUSTOM CODE to make them easy to find and modify.
// Additionally there are other files you need to edit to activate your precompile.
// These areas are highlighted with comments "ADD YOUR PRECOMPILE HERE".
// For testing take a look at other precompile tests in core/stateful_precompile_test.go

/* General guidelines for precompile development:
1- Read the comment and set a suitable contract address in precompile/params.go. E.g:
	IHelloWorldAddress = common.HexToAddress("ASUITABLEHEXADDRESS")
2- Set gas costs here
3- It is recommended to only modify code in the highlighted areas marked with "CUSTOM CODE STARTS HERE". Modifying code outside of these areas should be done with caution and with a deep understanding of how these changes may impact the EVM.
Typically, custom codes are required in only those areas.
4- Add your precompile upgrade in params/config.go
5- Add your upgradable config in params/precompile_config.go
6- Add your solidity interface and test contract to contract-examples/contracts
7- Write solidity tests for your precompile in contract-examples/test
8- Create e2e test for your solidity test in tests/e2e/solidity/suites.go
9- Create your genesis with your precompile enabled in tests/e2e/genesis/
10- Run your e2e precompile Solidity tests with 'E2E=true ./scripts/run.sh'

*/

package precompile

import (
	"errors"
	"math/big"
	"strings"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/vmerrs"

	"github.com/ethereum/go-ethereum/common"
)

const (
	SayHelloGasCost    uint64 = 30 // SET A GAS COST HERE
	SetGreetingGasCost uint64 = 50 // SET A GAS COST HERE

	// IHelloWorldRawABI contains the raw ABI of IHelloWorld contract.
	IHelloWorldRawABI = "[{\"inputs\":[],\"name\":\"sayHello\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"recipient\",\"type\":\"string\"}],\"name\":\"setGreeting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
)

// Singleton StatefulPrecompiledContract and signatures.
var (
	_ StatefulPrecompileConfig = &IHelloWorldConfig{}

	IHelloWorldABI abi.ABI // will be initialized by init function

	IHelloWorldPrecompile StatefulPrecompiledContract // will be initialized by init function

	// THIS SHOULD BE MOVED TO precompile/params.go with a suitable hex address.
	IHelloWorldAddress = common.HexToAddress("ASUITABLEHEXADDRESS")
)

// IHelloWorldConfig implements the StatefulPrecompileConfig
// interface while adding in the IHelloWorld specific precompile address.
type IHelloWorldConfig struct {
	UpgradeableConfig
}

func init() {
	parsed, err := abi.JSON(strings.NewReader(IHelloWorldRawABI))
	if err != nil {
		panic(err)
	}
	IHelloWorldABI = parsed

	IHelloWorldPrecompile = createIHelloWorldPrecompile(IHelloWorldAddress)
}

// NewIHelloWorldConfig returns a config for a network upgrade at [blockTimestamp] that enables
// IHelloWorld .
func NewIHelloWorldConfig(blockTimestamp *big.Int) *IHelloWorldConfig {
	return &IHelloWorldConfig{

		UpgradeableConfig: UpgradeableConfig{BlockTimestamp: blockTimestamp},
	}
}

// NewDisableIHelloWorldConfig returns config for a network upgrade at [blockTimestamp]
// that disables IHelloWorld.
func NewDisableIHelloWorldConfig(blockTimestamp *big.Int) *IHelloWorldConfig {
	return &IHelloWorldConfig{
		UpgradeableConfig: UpgradeableConfig{
			BlockTimestamp: blockTimestamp,
			Disable:        true,
		},
	}
}

// Equal returns true if [s] is a [*IHelloWorldConfig] and it has been configured identical to [c].
func (c *IHelloWorldConfig) Equal(s StatefulPrecompileConfig) bool {
	// typecast before comparison
	other, ok := (s).(*IHelloWorldConfig)
	if !ok {
		return false
	}
	// CUSTOM CODE STARTS HERE
	// modify this boolean accordingly with your custom IHelloWorldConfig, to check if [other] and the current [c] are equal
	// if IHelloWorldConfig contains only UpgradeableConfig  you can skip modifying it.
	equals := c.UpgradeableConfig.Equal(&other.UpgradeableConfig)
	return equals
}

// Address returns the address of the IHelloWorld. Addresses reside under the precompile/params.go
// Select a non-conflicting address and set it in the params.go.
func (c *IHelloWorldConfig) Address() common.Address {
	return IHelloWorldAddress
}

// Configure configures [state] with the initial configuration.
func (c *IHelloWorldConfig) Configure(_ ChainConfig, state StateDB, _ BlockContext) {

	// CUSTOM CODE STARTS HERE
}

// Contract returns the singleton stateful precompiled contract to be used for IHelloWorld.
func (c *IHelloWorldConfig) Contract() StatefulPrecompiledContract {
	return IHelloWorldPrecompile
}

// PackSayHello packs the include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackSayHello() ([]byte, error) {
	return IHelloWorldABI.Pack("sayHello")
}

// PackSayHelloOutput attempts to pack given  of type string
// to conform the ABI outputs.
func PackSayHelloOutput(string) ([]byte, error) {
	return IHelloWorldABI.PackOutput("sayHello")
}

func sayHello(accessibleState PrecompileAccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = deductGas(suppliedGas, SayHelloGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// no input provided for this function

	// CUSTOM CODE STARTS HERE

	var output string // CUSTOM CODE FOR AN OUTPUT
	packedOutput, err := PackSayHelloOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackSetGreetingInput attempts to unpack [input] into the string type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackSetGreetingInput(input []byte) (string, error) {
	res, err := IHelloWorldABI.UnpackInput("setGreeting", input)
	if err != nil {
		return nil, err
	}
	unpacked := *abi.ConvertType(res[0], new(string)).(*string)
	return unpacked, nil
}

// PackSetGreeting packs [recipient] of type string into the appropriate arguments for setGreeting.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackSetGreeting(recipient string) ([]byte, error) {
	return IHelloWorldABI.Pack("setGreeting", recipient)
}

func setGreeting(accessibleState PrecompileAccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = deductGas(suppliedGas, SetGreetingGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the SetGreetingInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackSetGreetingInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	_ = inputStruct // CUSTOM CODE OPERATES ON INPUT
	// this function does not return an output, leave this one as is
	packedOutput := []byte{}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// createIHelloWorldPrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.

func createIHelloWorldPrecompile(precompileAddr common.Address) StatefulPrecompiledContract {
	var functions []*statefulPrecompileFunction

	methodSayHello, ok := IHelloWorldABI.Methods["sayHello"]
	if !ok {
		panic("given method does not exist in the ABI")
	}
	functions = append(functions, newStatefulPrecompileFunction(methodSayHello.ID, sayHello))

	methodSetGreeting, ok := IHelloWorldABI.Methods["setGreeting"]
	if !ok {
		panic("given method does not exist in the ABI")
	}
	functions = append(functions, newStatefulPrecompileFunction(methodSetGreeting.ID, setGreeting))

	// Construct the contract with no fallback function.
	contract := newStatefulPrecompileWithFunctionSelectors(nil, functions)
	return contract
}
